StockX Youtube Video Dev Notes 

[#][#][#][#]  Backend TECH STACK [#][#][#][#]
 - Python 3.13
        [#] Explain why python
 - SQLAlchemy ORM 
        [#] Defines database tables that are in Postgres as Python classes instead of using raw sql queries/ creating
 - Alembic 
        [#] Took that works with SQLAlchemy to manage the database schema migrations (create/alter tables etc)
 - FastAPI 
        [#] modern async web framework 
 - Docker 
        [#] Docker container of Postgres database solution
 - AWS | S3 | Lambda | Docker
        [#] For deployment and local testing

[#][#][#][#] Backend TECH STACK [#][#][#][#]

[#][#]Python Installation[#][#]

        [#] Python Installation on Windows Steps: 
            [#] Visit official Python webpage @ 'Python.org'
                -Download latest version and make sure within the installation wizard to click 'Add Python to PATH'
                - explain what PATH means for windows users 
                - Run the installer by opening the command prompt and typing 'python --version'

        
        [#] Python Installation on MacOS Steps: 
            [#] Install Homebrew 
                -Explain what Homebrew is and how to use it on MacOS
                        - RUN COMMAND -> /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            [#] Install Python
                    - command : brew install python 
                    - verify installation: python3 --version
[#][#]Python Installation[#][#]

[#][#]Make Project Directory | Setup Virtual ENV[#][#]

            - Explain: Project file structure and relevance 
            - Explain: Virtual Environment and its purpose for this Project
                        - recommended for python for dependency version complications
                TERMINAL COMMANDS: 
                    - mkdir stockx-Demo
                    - cd stockX-Demo
                    - python -m venv venv 
                    - source venv/bon/activate
                    - pip install fastapi sqlalchemy pydantic alembic psycopg2-binary uvicorn python-dotenv
[#][#]Make Project Directory | Setup Virtual ENV[#][#]

[#] Docker Installation | Docker Pull PostgreSQL:latest

        [#] Create docker-compose.yml 
        [#] Create postgres service with container_name, ports, environment data, volumes, networks 
                [#] explain these concepts about Docker 

        [#] COMMANDS -> 
                [start psql session] -> docker exec -it stockx-postgres psql -U stockx -d stockx

[#][#]Create data models | SQLAlchemy models | Alembic data migration[#][#][#][#]

        [$] Dev Notes - 
                [$$] Alembic - light weight database migration tool for the usage with SQLAlchemy.
                                Use Alembic to migrate SQLAlchemy model classes to Postgres.
                                Alembic will enable you to make changes to you database schema 
                                and keep track of versioning. 

                [$$$] SQLAlchemy ORM  - uses python classes to represent and define database tables 

        STEPS: 
        [#] Review Postgres tables & DatabaseTables.txt for proposed 'schema'
        [#] Create a 'database.py' configuration file to initialize SQLAlchemy (setup) and database URL
                [#] Create model classes and schemas
        [#] Install 'alembic' if not already and initialize within the /app Directory
                [#] pip install alembic 
                [#] alembic init  -> alembic -> creates an alembic env and a 'alembic.in'
                [#] Set 'sqlalchemy.url' in 'alembic.ini' to postgresql database url 
                [#] configure 'env.py' in the /alembic/env.py' directory, import all classe within /models directory to /alembic/env.py as 'app.models'
                [#] create Alembic revision (i.e. change in model classes), run command in same directory as alembic.ini 'alembic revision --autogenerate -m "Initial Migration" -> THEN -> alembic upgrade HEAD
                [#] dev environment steps when updating model class 
                        [#] docker-compose down -v 
                        [#] docker-compose up -d
                        [#] alembic upgrade head 
                                - after making model changes
                        [#] alembic revision --autogenerate -m "Description of model changes"
                        [#] alembic upgrade head 
        [#] Pydantic schemas
                [#] DTOs for FastAPI route handlers
                [#] Used for validating incoming requests data 'UserCreate'
                [#] Controlling the response format 'UserOut'
        [#] Creating Tables in Dev: init_db.py
                [#]  Run command in root folder Script location -> python -m app.utils.Scripts.init_db
        [#] Running products injection script 
                [#] Run command in root -> python -m app.utils.Scripts.productsInjection
        [#] Restart/Start backend application 
                [#] Run command -> uvicorn app.main:app --reload
[#][#]Create data models | SQLAlchemy models | Alembic data migration[#][#][#][#]
        
[#] Collecting data from RapidAPI -> Sneaker Database - StockX API 
        [#] Data collection endpoints 
                [#] StockX Only - Sneakers Only 
                                [#] Can use for products data table
                                [#] Brands 
                                        - adidas, Air Jordan, Asics, New Balance , Nike, Puma, Yeezy
                [#] APPAREL
                                [#] Returns apparel for brand query string, use for products etc
                [#] Most Popular 
                                [#] use for most popular row on front end 
                [#] Simple Search
                                [#] use to fill in for other data 
        [#] Data tables that will be ingested with data -> products, users


        [#] StockX Endpoint data collections | Utis/Data/**
                [# FROM] /getProducts -> Stockx Only
                        - Nike
                        - adidas
                        - New Balance
                        - Air Jordan
                        - Asics
                        - Yeezy
                        - Travis Scott
                   
                [# FROM] /ApparelSearch - Women    

        [#] SQL create indexes:
                CREATE INDEX idx_products_sales_count ON products (sales_count);
                CREATE INDEX idx_products_brand ON products (brand);
                CREATE INDEX idx_products_last_sale_date ON products (last_sale_date);          
        
        [#] Cleaning data from RapidAPI | Data Conversion | Database Injection
                [X] Data cleaning for 'Sneakers/StockXOnly/*.json' files into 'product.py' data table
                [#] 'products' Postgres data cleaning 
                id (UUID) -> JSON objectId must be parsed as UUID type
                thumbnail_url -> Nested field from media
                retail_price -> Extracted from product traits
                last_sale_price, last_sale_date -> Deeply nested in market.salesInformation
                average_price, sales_count -> Nested in market.statistics.annual
                description -> Sometimes empty or missing in JSON
                listing_type, category -> Renamed fields to match DB
                last_sale_date -> ISO string â†’ datetime

        [#] Running the productsInjection script 
[#] Collecting data from RapidAPI -> Sneaker Database - StockX API
                
----- > Endpoints | Testing Endpoints < -----

        [X] Relationship of the Products API [X]
                Project Architecture Overview
                Database Layer

                SQLAlchemy ORM: Object-Relational Mapping for PostgreSQL database
                Model Definition: Product class in app/models/product.py defines the database schema
                Alembic: Handles database migrations and schema versioning
                Database Connection: Configured in app/database.py with connection pool settings

                Schema Validation

                Pydantic Models: Data validation using ProductSchema classes in app/schemas/product_schema.py
                Input Validation: ProductCreate and ProductUpdate schemas enforce data integrity
                Output Formatting: ProductResponse schema standardizes API responses
                Schema Evolution: Separate models for different operations (create/update/response)

                API Layer

                FastAPI Framework: Handles HTTP requests, routing, and documentation
                Router Organization: Products router in app/routers/products.py
                Dependency Injection: Database session provided via Depends(get_db)
                Endpoint Design: RESTful CRUD operations and custom business endpoints

                Authentication/Security

                CORS Middleware: Configured in main.py to allow cross-origin requests
                Input Validation: Query parameters validated via Pydantic and FastAPI

                Application Flow

                Client sends request to an endpoint
                FastAPI routes request to appropriate handler
                Handler accesses database via SQLAlchemy session
                Database operations return SQLAlchemy model instances
                Pydantic schemas convert ORM models to JSON-serializable responses

                Key Components Breakdown
                Product Model (app/models/product.py)

                Extends SQLAlchemy's Base class
                Defines table columns with types, constraints, and relationships
                Includes timestamps for created_at and updated_at
                Maps directly to database table products

                Pydantic Schemas (app/schemas/product_schema.py)

                ProductBase: Common fields shared across schemas
                ProductCreate: Fields required for creating a product
                ProductUpdate: Optional fields for updating a product
                ProductResponse: Complete product representation for API responses
                from_attributes = True: Enables ORM mode for SQLAlchemy compatibility

                API Router (app/routers/products.py)

                Prefix: /products
                Tags: ["Products"] for Swagger documentation grouping
                Standard CRUD operations: GET, POST, PUT, DELETE
                Business endpoints:

                /trending: Products ranked by sales count
                /popular-brands: Products organized by brand
                /new-arrivals: Products sorted by creation date
                /recommended-for-you: Personalized recommendations with filtering
                /three-day-shipping: Products eligible for fast shipping
                /search/{query}: Text search across product attributes



                Main Application (app/main.py)

                Creates FastAPI application instance
                Configures CORS middleware
                Registers routers
                Initializes database tables
                Provides health check and root endpoints

                Database Configuration (app/database.py)

                Creates SQLAlchemy engine with connection parameters
                Defines session factory for dependency injection
                Provides get_db() function for request-scoped database sessions

                Data Flow Example

                User requests /products/trending?limit=10
                FastAPI routes to get_trending_products() handler
                Handler acquires database session via dependency injection
                SQLAlchemy query retrieves products ordered by sales count
                Product ORM objects are converted to Pydantic models
                FastAPI serializes Pydantic models to JSON response

                Development Patterns Used

                Repository Pattern: Database operations encapsulated in route handlers
                DTO Pattern: Pydantic schemas act as Data Transfer Objects
                Dependency Injection: Database session provided to handlers as needed
                Query Parameters: Optional filters for flexible API usage
                Error Handling: HTTP exceptions for client-friendly errors

        [X] Relationship of the Products API [X]


        [X] Testing endpoints command -> uvicorn app.main:app --reload
                - open browser and navigate to 'http://localhost:8000/docs'
        [X] cURL commands: 
                - curl -X 'GET' 'http://localhost:8000/api/products/trending?limit=10' -H 'accept: application/json'
                - curl -X 'GET' 'http://localhost:8000/api/products/recommended-for-you?category=sneakers&gender=men&limit=5' -H 'accept: application/json'
                - curl -X 'GET' 'http://localhost:8000/api/products/three-day-shipping?limit=5' -H 'accept: application/json'
                - curl -X 'POST' 'http://localhost:8000/api/products/' \
                        -H 'accept: application/json' \
                        -H 'Content-Type: application/json' \
                        -d '{
                        "name": "New Product",
                        "brand": "Test Brand",
                        "model": "Test Model",
                        "retail_price": 100,
                        "category": "sneakers",
                        "gender": "unisex",
                        "thumbnail_url": "https://example.com/image.jpg"
                        }'
                - curl -X 'GET' 'http://localhost:8000/products/1' -H 'accept: application/json'
                - curl -X 'PUT' 'http://localhost:8000/products/1' \
                        -H 'accept: application/json' \
                        -H 'Content-Type: application/json' \
                        -d '{
                        "retail_price": 110,
                        "sales_count": 5
                        }'
                - curl -X 'GET' 'http://localhost:8000/products/search/adidas' -H 'accept: application/json'

----- > Endpoints | Testing Endpoints < -----

-----> FastAPI Security Integration | JWT | Clerk <-----


        $2b$12$6n/dktdF/9ZMwviqwJqSbOgo8JUFbpMXi5lTbqOLYENYE0oSLRRZy



        [#][#] Dev Notes of classes/code/libraries and relationships that make up the StockX User Authentication | Clerk Authentication [#][#]
                Client                  FastAPI App                 Database
                │                         │                           │
                ├── Login Request ───────►│                           │
                │                         ├── Validate Credentials ──►│
                │                         │◄── Return User Data ──────┤
                │                         │                           │
                │                         ├── Generate JWT Token      │
                │◄── Return JWT Token ────┤                           │
                │                         │                           │
                │                         │                           │
                ├── Request + JWT ───────►│                           │
                │                         ├── Verify JWT              │
                │                         ├── Extract User ID         │
                │                         ├── Load User ─────────────►│
                │                         │◄── Return User Data ──────┤
                │                         │                           │
                │◄── Response ────────────┤                           │
                │                         │                           │

                                CODE RELATIONSHIPS 
                OAuth2PasswordBearer
                        │
                        ▼
                        get_current_user() ──► decode_token() ──► JWT Library
                        │                                               ▲
                        │                                               │
                        ▼                                               │
                Database                                        create_access_token()
                        ▲                                               ▲
                        │                                               │
                        │                                               │
                        User Model ◄─────── Custom Auth Router   ───────┘
                                                │
                                                ▼
                                        Email Service ───► SMTP Server
        [#][#] Dev Notes of classes/code/libraries and relationships that make up the StockX User Authentication | Clerk Authentication [#][#]

        [#][#] Additonal Dev notes | Custom JWT Auth [#][#]
                Custom JWT Auth: Additional Dev Notes
                Model Structure

                User Model - Core attributes:

                id: Primary key using UUID for security and global uniqueness
                email: Used for authentication, unique
                password_hash: Securely stored with bcrypt
                roles: One-to-many relationship to UserRole


                UserRole Model - Links users to roles:

                user_id: References the user
                role: The role as a string (from RoleEnum)
                granted_at: Timestamp for auditing


                RoleEnum - Typed representation of roles:

                FREE_USER: Basic access
                PAID_USER: Premium access
                ADMIN: Administrative privileges



                Authentication Flow in Detail

                Registration:

                Validate email uniqueness
                Hash password with bcrypt
                Create User record
                Add FREE_USER role
                Send welcome email


                Login:

                Validate credentials against database
                Generate signed JWT token with user ID as subject
                Add expiration time to token
                Return token to client


                Request Authentication:

                Extract token from Authorization header
                Verify token signature and expiration
                Extract user ID from token
                Load user from database
                Make user available to route handlers



                Database Considerations

                Indexes:

                User.email: For fast login and uniqueness checks
                User.clerk_id: For fast lookup during Clerk webhook handling


                Constraints:

                User.email: UNIQUE constraint
                User.clerk_id: UNIQUE constraint when present


                Relationships:

                User to UserRole: One-to-many relationship
                Ensures roles can be added/removed individually



                Dual Auth System
                The system supports both:

                Custom JWT Auth:

                Full control over the authentication flow
                Local password management
                Follows OAuth2 password flow standard


                Clerk Integration:

                Delegated authentication to Clerk
                Webhook-based user synchronization
                SSO and social login support
        [#][#] Additonal Dev notes | Custom JWT Auth [#][#]

        [#][#] Testing StockX Authentication [#][#]
                Testing Your Auth Implementation
                1. Testing Clerk Integration:
                First, you'll need to set up Clerk:

                Create a Clerk account at https://clerk.dev
                Set up your application in the Clerk dashboard
                Get your API keys from the Clerk dashboard
                Configure your environment variables:

                CLERK_API_KEY - Your Clerk secret key
                CLERK_WEBHOOK_SECRET - Your webhook signing secret
                CLERK_JWT_KEY - Your Clerk JWT verification key



                Then, you can test the Clerk webhook integration using:

                Ngrok to expose your local server to the internet:
                bashngrok http 8000

                Configure the webhook URL in the Clerk dashboard to point to your ngrok URL + /api/webhooks/clerk
                You can manually test creating a user in Clerk and see if it gets synced to your database.

                2. Testing Custom Auth:
                You can test the custom auth system using:
                1. User Registration:
                bash curl -X POST http://localhost:8000/api/auth/register \
                -H "Content-Type: application/json" \
                -d '{
                "email": "test@example.com",
                "password": "Password123!",
                "name": "Test User"
                }'
                2. Get Auth Token:
                bash curl -X POST http://localhost:8000/api/auth/token \
                -H "Content-Type: application/x-www-form-urlencoded" \
                -d "username=test@example.com&password=Password123!"
                Save the token from the response.
                3. Access Protected Routes:
                bash curl -X GET http://localhost:8000/api/auth/me \
                -H "Authorization: Bearer YOUR_TOKEN_HERE"
                4. Test Password Reset:
                bash curl -X POST http://localhost:8000/api/auth/reset-password \
                -H "Content-Type: application/json" \
                -d '{
                "email": "test@example.com"
                }'
                3. Using ThunderClient in VS Code:

                Create a new collection for authentication testing
                Test Clerk Webhook:

                Method: POST
                URL: http://localhost:8000/api/webhooks/clerk
                Headers:

                svix-id: A random UUID
                svix-signature: (You'll need the real signature from Clerk)
                svix-timestamp: Current timestamp


                Body: Sample Clerk webhook payload


                Test User Registration:

                Method: POST
                URL: http://localhost:8000/api/auth/register
                Body (JSON):

                json{
                "email": "test@example.com",
                "password": "Password123!",
                "name": "Test User"
                }

                Test Login:

                Method: POST
                URL: http://localhost:8000/api/auth/token
                Body (form-data):

                username: test@example.com
                password: Password123!


                Tests: Save token to environment variable:

                jsconst response = JSON.parse(tc.response.body);
                tc.setEnvironmentVariable("token", response.access_token);

                Test Get Current User:

                Method: GET
                URL: http://localhost:8000/api/auth/me
                Headers:

                Authorization: Bearer {{token}}




                Test Protected Product Routes:

                Method: POST
                URL: http://localhost:8000/products/
                Headers:

                Authorization: Bearer {{token}}


                Body: Sample product data
        [#][#] Testing StockX Authentication [#][#]

-----> FastAPI Security Integration | JWT | Clerk <-----