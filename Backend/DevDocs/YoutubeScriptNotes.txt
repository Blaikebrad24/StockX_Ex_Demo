StockX Youtube Video Dev Notes 

[#][#][#][#] TECH STACK [#][#][#][#]
 - Python 
        [#] Explain why python
 - SQLAlchemy ORM 
        [#] Defines database tables that are in Postgres as Python classes instead of using raw sql queries/ creating
- Alembic 
        [#] Took that works with SQLAlchemy to manage the database schema migrations (create/alter tables etc)
- FastAPI 
        [#] modern async web framework 

[#][#][#][#] TECH STACK [#][#][#][#]

----- > Setup | Python Installation | Docker Postgres Container | SQLAlchemy Pydantic Alembic Configuration < -----
[#] Python Installation 

        [#] Python Installation on Windows Steps: 
            [#] Visit official Python webpage @ 'Python.org'
                -Download latest version and make sure within the installation wizard to click 'Add Python to PATH'
                - explain what PATH means for windows users 
                - Run the installer by opening the command prompt and typing 'python --version'

        
        [#] Python Installation on MacOS Steps: 
            [#] Install Homebrew 
                -Explain what Homebrew is and how to use it on MacOS
                        - RUN COMMAND -> /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            [#] Install Python
                    - command : brew install python 
                    - verify installation: python3 --version

[#] Make Project Directory | Setup Virtual ENV

            - Explain: Project file structure and relevance 
            - Explain: Virtual Environment and its purpose for this Project
                        - recommended for python for dependency version complications
                TERMINAL COMMANDS: 
                    - mkdir stockx-Demo
                    - cd stockX-Demo
                    - python -m venv venv 
                    - source venv/bon/activate
                    - pip install fastapi sqlalchemy pydantic alembic psycopg2-binary uvicorn python-dotenv


[#] Docker Installation | Docker Pull PostgreSQL:latest

        [#] Create docker-compose.yml 
        [#] Create postgres service with container_name, ports, environment data, volumes, networks 
                [#] explain these concepts about Docker 

[#] Create data models | SQLAlchemy models | Alembic data migration 

        [$] Dev Notes - 
                [$$] Alembic - light weight database migration tool for the usage with SQLAlchemy.
                                Use Alembic to migrate SQLAlchemy model classes to Postgres.
                                Alembic will enable you to make changes to you database schema 
                                and keep track of versioning. 

                [$$$] SQLAlchemy ORM  - uses python classes to represent and define database tables 

        STEPS: 
        [#] Review Postgres tables & DatabaseTables.txt for proposed 'schema'
        [#] Create a 'database.py' configuration file to initialize SQLAlchemy (setup) and database URL
                [#] Create model classes and schemas
        [#] Install 'alembic' if not already and initialize within the /app Directory
                [#] pip install alembic 
                [#] alembic init alembic -> creates an alembic env and a 'alembic.in'
                [#] Set 'sqlalchemy.url' in 'alembic.ini' to postgresql database url 
                [#] configure 'env.py' in the /alembic/env.py' directory, import all classe within /models directory to /alembic/env.py as 'app.models'
                [#] create Alembic revision, run command in same directory as alembic.ini 'alembic revision --autogenerate -m "Initial Migration" -> THEN -> alembic upgrade HEAD
        [#] Pydantic schemas
                [#] DTOs for FastAPI route handlers
                [#] Used for validating incoming requests data 'UserCreate'
                [#] Controlling the response format 'UserOut'
        [#] Creating Tables in Dev: init_db.py
                [#]  Run command in root folder Script location -> python -m app.utils.Scripts.init_db

----- > Creating the data | Python Script | RapidAPI data cleaning | Multiprocessing < -----
        
[#] Collecting data from RapidAPI -> Sneaker Database - StockX API 
        [#] Data collection endpoints 
                [#] StockX Only - Sneakers Only 
                                [#] Can use for products data table
                                [#] Brands 
                                        - adidas, Air Jordan, Asics, New Balance , Nike, Puma, Yeezy
                [#] APPAREL
                                [#] Returns apparel for brand query string, use for products etc
                [#] Most Popular 
                                [#] use for most popular row on front end 
                [#] Simple Search
                                [#] use to fill in for other data 
        [#] Data tables that will be ingested with data -> products, users


        [#] StockX Endpoint data collections | Utis/Data/**
                [# FROM] /getProducts -> Stockx Only
                        - Nike
                        - adidas
                        - New Balance
                        - Air Jordan
                        - Asics
                        - Yeezy
                        - Travis Scott
                   
                [# FROM] /ApparelSearch - Women    

        [#] SQL create indexes:
                CREATE INDEX idx_products_sales_count ON products (sales_count);
                CREATE INDEX idx_products_brand ON products (brand);
                CREATE INDEX idx_products_last_sale_date ON products (last_sale_date);          
        
        [#] Cleaning data from RapidAPI | Data Conversion | Database Injection
                [X] Data cleaning for 'Sneakers/StockXOnly/*.json' files into 'product.py' data table
                [#] 'products' Postgres data cleaning 
                id (UUID) -> JSON objectId must be parsed as UUID type
                thumbnail_url -> Nested field from media
                retail_price -> Extracted from product traits
                last_sale_price, last_sale_date -> Deeply nested in market.salesInformation
                average_price, sales_count -> Nested in market.statistics.annual
                description -> Sometimes empty or missing in JSON
                listing_type, category -> Renamed fields to match DB
                last_sale_date -> ISO string â†’ datetime

                
----- > Endpoints | Testing Endpoints < -----

        [X] Relationship of the Products API [X]
                Project Architecture Overview
                Database Layer

                SQLAlchemy ORM: Object-Relational Mapping for PostgreSQL database
                Model Definition: Product class in app/models/product.py defines the database schema
                Alembic: Handles database migrations and schema versioning
                Database Connection: Configured in app/database.py with connection pool settings

                Schema Validation

                Pydantic Models: Data validation using ProductSchema classes in app/schemas/product_schema.py
                Input Validation: ProductCreate and ProductUpdate schemas enforce data integrity
                Output Formatting: ProductResponse schema standardizes API responses
                Schema Evolution: Separate models for different operations (create/update/response)

                API Layer

                FastAPI Framework: Handles HTTP requests, routing, and documentation
                Router Organization: Products router in app/routers/products.py
                Dependency Injection: Database session provided via Depends(get_db)
                Endpoint Design: RESTful CRUD operations and custom business endpoints

                Authentication/Security

                CORS Middleware: Configured in main.py to allow cross-origin requests
                Input Validation: Query parameters validated via Pydantic and FastAPI

                Application Flow

                Client sends request to an endpoint
                FastAPI routes request to appropriate handler
                Handler accesses database via SQLAlchemy session
                Database operations return SQLAlchemy model instances
                Pydantic schemas convert ORM models to JSON-serializable responses

                Key Components Breakdown
                Product Model (app/models/product.py)

                Extends SQLAlchemy's Base class
                Defines table columns with types, constraints, and relationships
                Includes timestamps for created_at and updated_at
                Maps directly to database table products

                Pydantic Schemas (app/schemas/product_schema.py)

                ProductBase: Common fields shared across schemas
                ProductCreate: Fields required for creating a product
                ProductUpdate: Optional fields for updating a product
                ProductResponse: Complete product representation for API responses
                from_attributes = True: Enables ORM mode for SQLAlchemy compatibility

                API Router (app/routers/products.py)

                Prefix: /products
                Tags: ["Products"] for Swagger documentation grouping
                Standard CRUD operations: GET, POST, PUT, DELETE
                Business endpoints:

                /trending: Products ranked by sales count
                /popular-brands: Products organized by brand
                /new-arrivals: Products sorted by creation date
                /recommended-for-you: Personalized recommendations with filtering
                /three-day-shipping: Products eligible for fast shipping
                /search/{query}: Text search across product attributes



                Main Application (app/main.py)

                Creates FastAPI application instance
                Configures CORS middleware
                Registers routers
                Initializes database tables
                Provides health check and root endpoints

                Database Configuration (app/database.py)

                Creates SQLAlchemy engine with connection parameters
                Defines session factory for dependency injection
                Provides get_db() function for request-scoped database sessions

                Data Flow Example

                User requests /products/trending?limit=10
                FastAPI routes to get_trending_products() handler
                Handler acquires database session via dependency injection
                SQLAlchemy query retrieves products ordered by sales count
                Product ORM objects are converted to Pydantic models
                FastAPI serializes Pydantic models to JSON response

                Development Patterns Used

                Repository Pattern: Database operations encapsulated in route handlers
                DTO Pattern: Pydantic schemas act as Data Transfer Objects
                Dependency Injection: Database session provided to handlers as needed
                Query Parameters: Optional filters for flexible API usage
                Error Handling: HTTP exceptions for client-friendly errors

        [X] Relationship of the Products API [X]


        [X] Testing endpoints command -> uvicorn app.main:app --reload
                - open browser and navigate to 'http://localhost:8000/docs'
        [X] cURL commands: 
                - curl -X 'GET' 'http://localhost:8000/products/trending?limit=10' -H 'accept: application/json'
                - curl -X 'GET' 'http://localhost:8000/products/recommended-for-you?category=sneakers&gender=men&limit=5' -H 'accept: application/json'
                - curl -X 'GET' 'http://localhost:8000/products/three-day-shipping?limit=5' -H 'accept: application/json'
                - curl -X 'POST' 'http://localhost:8000/products/' \
                        -H 'accept: application/json' \
                        -H 'Content-Type: application/json' \
                        -d '{
                        "name": "New Product",
                        "brand": "Test Brand",
                        "model": "Test Model",
                        "retail_price": 100,
                        "category": "sneakers",
                        "gender": "unisex",
                        "thumbnail_url": "https://example.com/image.jpg"
                        }'
                - curl -X 'GET' 'http://localhost:8000/products/1' -H 'accept: application/json'
                - curl -X 'PUT' 'http://localhost:8000/products/1' \
                        -H 'accept: application/json' \
                        -H 'Content-Type: application/json' \
                        -d '{
                        "retail_price": 110,
                        "sales_count": 5
                        }'
                - curl -X 'GET' 'http://localhost:8000/products/search/adidas' -H 'accept: application/json'
