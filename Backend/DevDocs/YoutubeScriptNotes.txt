StockX Youtube Video Dev Notes 

[#][#][#][#] TECH STACK [#][#][#][#]
 - Python 
        [#] Explain why python
 - SQLAlchemy ORM 
        [#] Defines database tables that are in Postgres as Python classes instead of using raw sql queries/ creating
- Alembic 
        [#] Took that works with SQLAlchemy to manage the database schema migrations (create/alter tables etc)
- FastAPI 
        [#] modern async web framework 

[#][#][#][#] TECH STACK [#][#][#][#]

----- > Setup | Python Installation | Docker Postgres Container | SQLAlchemy Pydantic Alembic Configuration < -----
[#] Python Installation 

        [#] Python Installation on Windows Steps: 
            [#] Visit official Python webpage @ 'Python.org'
                -Download latest version and make sure within the installation wizard to click 'Add Python to PATH'
                - explain what PATH means for windows users 
                - Run the installer by opening the command prompt and typing 'python --version'

        
        [#] Python Installation on MacOS Steps: 
            [#] Install Homebrew 
                -Explain what Homebrew is and how to use it on MacOS
                        - RUN COMMAND -> /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
            [#] Install Python
                    - command : brew install python 
                    - verify installation: python3 --version

[#] Make Project Directory | Setup Virtual ENV

            - Explain: Project file structure and relevance 
            - Explain: Virtual Environment and its purpose for this Project
                        - recommended for python for dependency version complications
                TERMINAL COMMANDS: 
                    - mkdir stockx-Demo
                    - cd stockX-Demo
                    - python -m venv venv 
                    - source venv/bon/activate
                    - pip install fastapi sqlalchemy pydantic alembic psycopg2-binary uvicorn python-dotenv


[#] Docker Installation | Docker Pull PostgreSQL:latest

        [#] Create docker-compose.yml 
        [#] Create postgres service with container_name, ports, environment data, volumes, networks 
                [#] explain these concepts about Docker 

[#] Create data models | SQLAlchemy models | Alembic data migration 

        [$] Dev Notes - 
                [$$] Alembic - light weight database migration tool for the usage with SQLAlchemy.
                                Use Alembic to migrate SQLAlchemy model classes to Postgres.
                                Alembic will enable you to make changes to you database schema 
                                and keep track of versioning. 

                [$$$] SQLAlchemy ORM  - uses python classes to represent and define database tables 

        STEPS: 
        [#] Review Postgres tables & DatabaseTables.txt for proposed 'schema'
        [#] Create a 'database.py' configuration file to initialize SQLAlchemy (setup) and database URL
                [#] Create model classes and schemas
        [#] Install 'alembic' if not already and initialize within the /app Directory
                [#] pip install alembic 
                [#] alembic init alembic -> creates an alembic env and a 'alembic.in'
                [#] Set 'sqlalchemy.url' in 'alembic.ini' to postgresql database url 
                [#] configure 'env.py' in the /alembic/env.py' directory, import all classe within /models directory to /alembic/env.py as 'app.models'
                [#] create Alembic revision 'alembic revision --autogenerate -m "Initial Migration" -> THEN -> alembic upgrade HEAD
        [#] Pydantic schemas
                [#] DTOs for FastAPI route handlers
                [#] Used for validating incoming requests data 'UserCreate'
                [#] Controlling the response format 'UserOut'
        [#] Creating Tables in Dev: init_db.py
                [#]  Run command in root folder Script location -> python -m app/utils/Scripts/init_db.py

----- > Creating the data | Python Script | RapidAPI data cleaning | Multithreading < -----
        
[#] Collecting data from RapidAPI -> Sneaker Database - StockX API 
        [#] Data collection endpoints 
                [#] StockX Only - Sneakers Only 
                                [#] Can use for products data table
                                [#] Brands 
                                        - adidas, Air Jordan, Asics, New Balance , Nike, Puma, Yeezy
                [#] APPAREL
                                [#] Returns apparel for brand query string, use for products etc
                [#] Most Popular 
                                [#] use for most popular row on front end 
                [#] Simple Search
                                [#] use to fill in for other data 
        [#] Data tables that will be ingested with data -> products, users


        [#] StockX Endpoint data collections | Utis/Data/**
                [# FROM] /getProducts -> Stockx Only
                        - Nike
                        - adidas
                        - New Balance
                        - Air Jordan
                        - Asics
                        - Yeezy
                        - Travis Scott
                   
                [# FROM] /ApparelSearch - Women    
        
        [#] Cleaning data from RapidAPI | Data Conversion | Database Injection
                [X] Data cleaning for 'Sneakers/StockXOnly/*.json' files into 'product.py' data table
                [#] 'products' Postgres data cleaning 
                id (UUID) -> JSON objectId must be parsed as UUID type
                thumbnail_url -> Nested field from media
                retail_price -> Extracted from product traits
                last_sale_price, last_sale_date -> Deeply nested in market.salesInformation
                average_price, sales_count -> Nested in market.statistics.annual
                description -> Sometimes empty or missing in JSON
                listing_type, category -> Renamed fields to match DB
                last_sale_date -> ISO string â†’ datetime

                
